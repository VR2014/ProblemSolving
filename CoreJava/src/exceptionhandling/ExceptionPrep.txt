## **Exception Handling in Java**

### **Overview**
An exception is an event that occurs during the execution of a program and disrupts its normal flow.
 Java uses exceptions to handle unexpected or error conditions, providing a structured way to manage runtime errors.

---

### **Types of Exceptions**
1. **Checked Exceptions (Compile-time Exceptions)**: 
   - Must be caught or declared in the method signature using `throws`.
   - Examples: `IOException`, `SQLException`

2. **Unchecked Exceptions (Runtime Exceptions)**:
   - Do not need to be declared or handled explicitly.
   - Examples: `NullPointerException`, `ArithmeticException`, `ArrayIndexOutOfBoundsException`

3. **Error**:
   - Indicates serious problems that a typical Java application should not attempt to catch.
   - Examples: `OutOfMemoryError`, `StackOverflowError`

---

### **Exception Handling Mechanism**
1. **try**: 
   - Code that might throw an exception is placed inside this block.

2. **catch**: 
   - Catches exceptions thrown by the `try` block and allows for handling or logging.

3. **finally**: 
   - This block executes regardless of whether an exception occurred, often used for cleanup actions.
   - **Note**: `finally` will not execute if `System.exit()` is called in the `try` or `catch` blocks.

4. **try-with-resources**:
   - A feature in which resources (e.g., file streams) are closed automatically at the end of the statement.
   - Used with classes implementing `AutoCloseable` interface, allowing automatic resource management without requiring `finally` for cleanup.

---

### **Using `throw` and `throws`**

- **throw**: 
  - Used to explicitly throw an exception in a method or block, immediately stopping the execution.
  - Example: `throw new IllegalArgumentException("Invalid input");`

- **throws**: 
  - Used in a method signature to indicate that the method can throw specified checked exceptions.
  - Example: `public void readFile() throws IOException`

---

### **Hierarchy of Exceptions**
```
Object
 └── Throwable
      ├── Exception
      │    ├── RuntimeException
      │    │     ├── IndexOutOfBoundsException
      │    │     ├── NullPointerException
      │    │     └── ArithmeticException
      │    ├── IOException
      │    │     └── FileNotFoundException
      │    └── SQLException
      └── Error
           └── OutOfMemoryError
```

---

### **Handling Multiple Exceptions**

1. **Multiple `catch` Blocks**:
   - You can have multiple `catch` blocks to handle different exceptions, but only one `try` block.
   - Example:
     ```java
     try {
         // Code that may throw exceptions
     } catch (IOException e) {
         // Handle IOException
     } catch (SQLException e) {
         // Handle SQLException
     }
     ```

2. **Single `catch` Block for Multiple Exceptions**:
   - Use the pipe symbol `|` to handle multiple exceptions in one `catch` block.
   - Example:
     ```java
     try {
         // Code that may throw exceptions
     } catch (IOException | SQLException e) {
         // Handle IOException or SQLException
     }
     ```

3. **General Exception Handling**:
   - You can handle multiple exceptions by specifying `throws Exception` or `throws Throwable` in the method signature, 
   but it is best to specify exact exceptions for clarity and maintainability.

---

### **Stack Trace Information**
A stack trace helps trace the exception back to the origin:
- **Exception name**: The type of the exception that occurred (e.g., `NullPointerException`).
- **Exception message**: A description or message associated with the exception.
- **Line number**: The specific line in the code where the exception was thrown.
- **Method information**: Indicates the method in which the exception occurred.

---

### **User-Defined Exceptions**
- Custom exceptions can be created by extending the `Exception` class (for checked exceptions) or `RuntimeException` class (for unchecked exceptions).
- Example:
  ```java
  public class LoginException extends Exception {
      public LoginException(String message) {
          super(message);
      }
  }
  ```

---

### **Common Questions and Concepts**

- **When does `finally` not execute?**
  - `finally` does not execute if `System.exit()` is called within `try` or `catch`, or if the program crashes before reaching `finally`.

- **Auto-closing resources with `try-with-resources`**:
  - Any class implementing the `AutoCloseable` interface (e.g., `FileInputStream`) can be used in a `try-with-resources` block to automatically release resources after use.

--- 
